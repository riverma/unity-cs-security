openapi: "3.0.1"
info:
  title: "Unity API Gateway"
  description: "Unity API Gateway"
  version: "2022-05-04T20:23:33Z"
servers:
- url: "https://<API_GATEWAY_BASE_URL>/{basePath}"
  variables:
    basePath:
      default: "/dev"
paths:
  /ades_wpst/processes:
    get:
      parameters:
      - name: "Authorization"
        in: "header"
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - Unity_API_Gateway_Lambda_WPST_UI_Demo_Authorizer_Node: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "http://<WPST_REST_API_ALB_BASE_URL>/processes"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
        passthroughBehavior: "when_no_match"
    post:
      parameters:
      - name: "Authorization"
        in: "header"
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - Unity_API_Gateway_Lambda_WPST_UI_Demo_Authorizer_Node: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "POST"
        uri: "http://<WPST_REST_API_ALB_BASE_URL>/processes"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
        passthroughBehavior: "when_no_match"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /ades_wpst/processes/{proc_id+}:
    get:
      parameters:
      - name: "proc_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "Authorization"
        in: "header"
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - Unity_API_Gateway_Lambda_WPST_UI_Demo_Authorizer_Node: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        httpMethod: "ANY"
        uri: "http://<WPST_REST_API_ALB_BASE_URL>/processes/{proc_id}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.proc_id: "method.request.path.proc_id"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "fdz6f9"
        cacheKeyParameters:
        - "method.request.path.proc_id"
    post:
      parameters:
      - name: "proc_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "Authorization"
        in: "header"
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - Unity_API_Gateway_Lambda_WPST_UI_Demo_Authorizer_Node: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        httpMethod: "ANY"
        uri: "http://<WPST_REST_API_ALB_BASE_URL>/processes/{proc_id}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.proc_id: "method.request.path.proc_id"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "fdz6f9"
        cacheKeyParameters:
        - "method.request.path.proc_id"
    options:
      parameters:
      - name: "proc_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
components:
  schemas:
    Empty:
      title: "Empty Schema"
      type: "object"
  securitySchemes:
    Unity_API_Gateway_Lambda_WPST_UI_Demo_Authorizer_Node:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        type: "token"
        authorizerUri: "<LAMBDA_AUTHORIZER_URL>"
        authorizerResultTtlInSeconds: 0
x-amazon-apigateway-request-validators:
  Validate body, query string parameters, and headers:
    validateRequestParameters: true
    validateRequestBody: true
